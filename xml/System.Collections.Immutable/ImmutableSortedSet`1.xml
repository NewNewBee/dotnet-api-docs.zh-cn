<Type Name="ImmutableSortedSet&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0080c65ae361c2dd35b230b5d3c6f991051fadaf" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73375522" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImmutableSortedSet&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.Generic.ISet&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableSet&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImmutableSortedSet`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.Generic.ISet`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableSortedSet`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableSortedSet(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IImmutableSet(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), ISet(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ImmutableSortedSet sealed : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::Generic::ISet&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableSet&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ImmutableSortedSet&lt;'T&gt; = class&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ISet&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableSet&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ISet&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableSet&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Immutable.ImmutableSortedSetDebuggerProxy`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="8b3dc-101">集内元素的类型。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-101">The type of elements in the set.</span></span></typeparam>
    <summary><span data-ttu-id="8b3dc-102">表示不可变的排序集实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-102">Represents an immutable sorted set implementation.</span></span>  
  
 <span data-ttu-id="8b3dc-103">**NuGet 包**：<see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-104">使用 <xref:System.Collections.Immutable.ImmutableSortedSet.CreateRange%2A> 方法创建使用项预填充的新的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-104">Create a new immutable sorted set that is prepopulated with items by using the <xref:System.Collections.Immutable.ImmutableSortedSet.CreateRange%2A> method.</span></span> <span data-ttu-id="8b3dc-105">当使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Add%2A>、<xref:System.Collections.Immutable.ImmutableSortedSet%601.Reverse%2A> 或 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Remove%2A>等方法操作不可变集时，将生成原始排序集的副本，应用操作并返回新的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-105">When you manipulate an immutable set with methods such as <xref:System.Collections.Immutable.ImmutableSortedSet%601.Add%2A>, <xref:System.Collections.Immutable.ImmutableSortedSet%601.Reverse%2A> or <xref:System.Collections.Immutable.ImmutableSortedSet%601.Remove%2A>, a copy of the original sorted set is made, manipulations applied and a new immutable sorted set is returned.</span></span>  
  
 <span data-ttu-id="8b3dc-106">如果需要对不可变集合执行多个操作，为了提高效率，您可以使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> 方法将 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 复制到 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>，并使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> 方法对其进行操作并使其再次成为不可变的。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-106">If you need to perform multiple operations on an immutable collection, to increase efficiency you can copy the <xref:System.Collections.Immutable.ImmutableSortedSet%601> to a <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> method, manipulate the set and make it immutable again using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> method.</span></span> <span data-ttu-id="8b3dc-107">这不会更改原始的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-107">This will not change the original immutable sorted set.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8b3dc-108">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-108">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-109">要相加的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-109">The value to add.</span></span></param>
        <summary><span data-ttu-id="8b3dc-110">将指定的值添加到此不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-110">Adds the specified value to this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-111">已添加元素的新集，或者此集（如果该元素已在此集内）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-111">A new set with the element added, or this set if the element is already in this set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-112">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-112">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-113">从不可变排序集内移除所有元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-113">Removes all elements from the immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-114">已移除元素的空集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-114">An empty set with the elements removed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-115">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-115">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableSortedSet.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-116">要检查的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-116">The value to check for.</span></span></param>
        <summary><span data-ttu-id="8b3dc-117">确定此不可变排序集是否包含指定的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-117">Determines whether this immutable sorted set contains the specified value.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-118">如果该集包含指定值，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-118"><see langword="true" /> if the set contains the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-119">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-119">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-120">获取不可变排序集内的元素数。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-120">Gets the number of elements in the immutable sorted set.</span></span></summary>
        <value><span data-ttu-id="8b3dc-121">不可变排序集内的元素数。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-121">The number of elements in the immutable sorted set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-122">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-122">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableSortedSet(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-123">获取空的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-123">Gets an empty immutable sorted set.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Except : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Except other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-124">要从此集内移除的项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-124">The items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-125">从此不可变排序集内移除一组指定项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-125">Removes a specified set of items from this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-126">已移除项的新集；如果原始集不包含任何项，则为原始集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-126">A new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-127">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-127">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Collections.Immutable.ImmutableSortedSet`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableSortedSet(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Enumerator GetEnumerator();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator" Usage="immutableSortedSet.GetEnumerator " FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableSortedSet`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Enumerator GetEnumerator();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Enumerator" Usage="immutableSortedSet.GetEnumerator " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-128">返回一个循环访问不可变排序集的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-128">Returns an enumerator that iterates through the immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-129">一个可用于循环访问集的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-129">An enumerator that can be used to iterate through the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="8b3dc-130">将此枚举器用作值类型（即，如果它未装箱），请不要通过将其分配给第二个变量或将其传递给其他方法来复制它。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-130">When you  use this enumerator as a value type (that is, when it isn't boxed), do not copy it by assigning it to a second variable or by passing it to another method.</span></span> <span data-ttu-id="8b3dc-131">当释放此枚举器时，它会将可变引用类型堆栈返回到资源池，并在复制值类型枚举器时（如果传递值，这可能很容易意外发生）。枚举器副本可能仍在使用已返回到资源池的资源池，从而导致数据损坏和异常。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-131">When this enumerator is disposed of, it returns a mutable reference type stack to a resource pool, and if the value type enumerator is copied (which can easily happen unintentionally if you pass the value around), there is a risk that a stack that has already been returned to the resource pool may still be in use by one of the enumerator copies, leading to data corruption and exceptions.</span></span>  
  
 <span data-ttu-id="8b3dc-132">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-132">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableSortedSet.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8b3dc-133">正在查找其位置的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-133">The value whose position is being sought.</span></span></param>
        <summary><span data-ttu-id="8b3dc-134">获取指定值在此不可变排序集内的出现位置。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-134">Gets the position within this immutable sorted set that the specified value appears in.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-135">如果找到 <paramref name="item" />，则为排序集内指定 <paramref name="item" /> 的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-135">The index of the specified <paramref name="item" /> in the sorted set, if <paramref name="item" /> is found.</span></span> <span data-ttu-id="8b3dc-136">如果 <paramref name="item" /> 未找到且小于此集内的一个或多个元素，此方法将返回一个负数，该负数是大于 value 的第一个元素的索引的按位求补。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-136">If <paramref name="item" /> is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value.</span></span> <span data-ttu-id="8b3dc-137">如果 <paramref name="item" /> 未找到且大于此集内的任何元素，此方法将返回一个负数，该负数是最后一个元素的索引的按位求补加 1。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-137">If <paramref name="item" /> is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-138">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-138">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Intersect : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Intersect other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-139">要与此集相交的集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-139">The set to intersect with this one.</span></span></param>
        <summary><span data-ttu-id="8b3dc-140">创建一个不可变排序集，其中包含同时存在于此集和指定集内的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-140">Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-141">一个新的不可变排序集，其中包含同时存在于两个集内的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-141">A new immutable sorted set that contains any elements that exist in both sets.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-142">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-142">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-143">获取一个值，该值指示此不可变排序集是否为空。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-143">Gets a value that indicates whether this immutable sorted set is empty.</span></span></summary>
        <value><span data-ttu-id="8b3dc-144">如果此集为空，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-144"><see langword="true" /> if this set is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-145">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-145">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsProperSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsProperSubsetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-146">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-146">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-147">确定当前不可变排序集是否为指定集合的真（严格）子集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-147">Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-148">如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-148"><see langword="true" /> if the current set is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-149">空集是任何其他集合的正确子集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-149">An empty set is a proper subset of any other collection.</span></span> <span data-ttu-id="8b3dc-150">因此，如果当前集为空，则此方法返回 `true`，除非 `other` 集合也为空。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-150">Therefore, this method returns `true` if the current set is empty, unless the `other` collection is also empty.</span></span>  
  
 <span data-ttu-id="8b3dc-151">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-151">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsProperSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsProperSupersetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-152">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-152">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-153">确定当前不可变排序集是否为指定集合的真超集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-153">Determines whether the current immutable sorted set is a proper superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-154">如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-154"><see langword="true" /> if the current set is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-155">空集是任何其他集合的真超集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-155">An empty set is a proper superset of any other collection.</span></span> <span data-ttu-id="8b3dc-156">因此，如果 `other` 参数表示的集合为空，则此方法返回 `true`，除非当前集也为空。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-156">Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, unless the current set is also empty.</span></span>  
  
 <span data-ttu-id="8b3dc-157">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-157">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsSubsetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-158">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-158">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-159">确定当前不可变排序集是否为指定集合的子集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-159">Determines whether the current immutable sorted set is a subset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-160">如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-160"><see langword="true" /> if the current set is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-161">空集是其他任何集（包括另一个空集）的子集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-161">An empty set is a subset of any other set, including another empty set.</span></span> <span data-ttu-id="8b3dc-162">因此，如果当前集为空，则此方法返回 `true` （即使 `other` 集合也为空）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-162">Therefore, this method returns `true` if the current set is empty, even if the `other` collection is also empty.</span></span>  
  
 <span data-ttu-id="8b3dc-163">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-163">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSupersetOf : seq&lt;'T&gt; -&gt; bool&#xA;override this.IsSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.IsSupersetOf other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-164">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-164">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-165">确定当前不可变排序集是否为指定集合的超集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-165">Determines whether the current immutable sorted set is a superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-166">如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-166"><see langword="true" /> if the current set is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-167">所有集合（包括空集）均为空集的超集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-167">All collections, including empty sets, are supersets of an empty set.</span></span> <span data-ttu-id="8b3dc-168">因此，如果 `other` 参数表示的集合为空（即使当前排序集为空），则此方法返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-168">Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, even if the current sorted set is empty.</span></span>  
  
 <span data-ttu-id="8b3dc-169">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-169">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-170">要从排序集中检索的元素的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-170">The index of the element to retrieve from the sorted set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-171">获取不可变排序集中位于给定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-171">Gets the element of the immutable sorted set at the given index.</span></span></summary>
        <value><span data-ttu-id="8b3dc-172">给定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-172">The element at the given index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-173">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-173">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public ref readonly T ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; 'T" Usage="immutableSortedSet.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-174">要返回集中的元素从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-174">The 0-based index of the element in the set to return.</span></span></param>
        <summary><span data-ttu-id="8b3dc-175">获取给定 <paramref name="index" /> 处的集元素的只读引用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-175">Gets a read-only reference of the element of the set at the given <paramref name="index" />.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-176">给定位置处的元素的只读引用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-176">A read-only reference of the element at the given position.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;T&gt; KeyComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;!T&gt; KeyComparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyComparer As IComparer(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;T&gt; ^ KeyComparer { System::Collections::Generic::IComparer&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyComparer : System.Collections.Generic.IComparer&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.KeyComparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-177">获取用于对不可变排序集中的键进行排序的比较器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-177">Gets the comparer used to sort keys in the immutable sorted set.</span></span></summary>
        <value><span data-ttu-id="8b3dc-178">用于对键进行排序的比较器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-178">The comparer used to sort keys.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-179">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-179">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public T Max { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Max" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Max" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Max As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Max { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Max : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Max" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-180">根据比较器的定义，获取不可变排序集内的最大值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-180">Gets the maximum value in the immutable sorted set, as defined by the comparer.</span></span></summary>
        <value><span data-ttu-id="8b3dc-181">集内的最大值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-181">The maximum value in the set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-182">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-182">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public T Min { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Min" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.Min" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Min As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Min { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Min : 'T" Usage="System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Min" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-183">根据比较器的定义，获取不可变排序集内的最小值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-183">Gets the minimum value in the immutable sorted set, as defined by the comparer.</span></span></summary>
        <value><span data-ttu-id="8b3dc-184">集内的最小值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-184">The minimum value in the set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-185">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-185">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps">
      <MemberSignature Language="C#" Value="public bool Overlaps (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Overlaps(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Overlaps (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Overlaps(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Overlaps : seq&lt;'T&gt; -&gt; bool&#xA;override this.Overlaps : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.Overlaps other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-186">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-186">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-187">确定当前的不可变排序集和指定的集合是否共享通用元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-187">Determines whether the current immutable sorted set and a specified collection share common elements.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-188">如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-188"><see langword="true" /> if the current set and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-189">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-189">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Remove(T value);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-190">要移除的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-190">The element to remove.</span></span></param>
        <summary><span data-ttu-id="8b3dc-191">从此不可变排序集中移除指定的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-191">Removes the specified value from this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-192">已移除元素的新不可变排序集；如果在此集内找不到元素，则为此集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-192">A new immutable sorted set with the element removed, or this set if the element was not found in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-193">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-193">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!T&gt; Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Function Reverse () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; seq&lt;'T&gt;" Usage="immutableSortedSet.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-194">返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它按逆序循环访问此不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-194">Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that iterates over this immutable sorted set in reverse order.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-195">一个枚举器，它按逆序循环访问不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-195">An enumerator that iterates over the immutable sorted set in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-196">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-196">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEquals">
      <MemberSignature Language="C#" Value="public bool SetEquals (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetEquals(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEquals (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SetEquals(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member SetEquals : seq&lt;'T&gt; -&gt; bool&#xA;override this.SetEquals : seq&lt;'T&gt; -&gt; bool" Usage="immutableSortedSet.SetEquals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-197">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-197">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-198">确定当前不可变排序集与指定的集合是否包含相同的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-198">Determines whether the current immutable sorted set and the specified collection contain the same elements.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-199">如果集相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-199"><see langword="true" /> if the sets are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-200">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-200">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymmetricExcept">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SymmetricExcept (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.SymmetricExcept : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.SymmetricExcept other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-201">项的另一个序列。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-201">The other sequence of items.</span></span></param>
        <summary><span data-ttu-id="8b3dc-202">创建一个不可变排序集，其中包含存在于此集内或者给定序列内（但不同时存在于两者中）的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-202">Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-203">新的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-203">The new immutable sorted set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-204">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-204">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8b3dc-205">要相加的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-205">The value to add.</span></span></param>
        <summary><span data-ttu-id="8b3dc-206">将指定值添加到集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-206">Adds the specified value to the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-207">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-207">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-208">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-208">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-209">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-209">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-210">从集合中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-210">Removes all the items from the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-211">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-211">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-212">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-212">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-213">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-213">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;T&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8b3dc-214">作为从集合复制的元素的目标的一维数组。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-214">The one-dimensional array that is the destination of the elements copied from collection.</span></span> <span data-ttu-id="8b3dc-215">该数组的索引必须从零开始。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-215">The array must have zero-based indexing.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="8b3dc-216"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-216">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8b3dc-217">从特定的数组索引开始，将集合的元素复制到数组中。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-217">Copies the elements of the collection to an array, starting at a particular array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-218">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-218">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-219">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-219">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-220">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-220">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-221">请参阅 <see cref="T:System.Collections.Generic.ICollection`1" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-221">See the <see cref="T:System.Collections.Generic.ICollection`1" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8b3dc-222">要从集合中移除的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-222">The object to remove from the collection.</span></span></param>
        <summary><span data-ttu-id="8b3dc-223">从集合中移除特定对象的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-223">Removes the first occurrence of a specific object from the collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-224">如果从集合中成功移除了 <see langword="true" />，则为 <paramref name="item" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-224"><see langword="true" /> if <paramref name="item" /> was successfully removed from the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-225">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-225">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-226">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ICollection%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-226">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-227">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-227">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-228">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-228">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-229">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-229">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-230">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-230">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-231">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.IEnumerable%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-231">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-232">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-232">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-233">应插入 <paramref name="item" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-233">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="8b3dc-234">要插入到集内的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-234">The object to insert into the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-235">在集内指定索引的位置插入项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-235">Inserts an item in the set at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-236">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-236">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-237">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.IList%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-237">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-238">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-238">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IList&lt;T&gt;::Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="8b3dc-239">请参阅 <see cref="T:System.Collections.Generic.IList`1" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-239">See the <see cref="T:System.Collections.Generic.IList`1" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-240">要移除的项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-240">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="8b3dc-241">移除指定索引处的项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-241">Removes the  item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-242">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-242">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-243">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.IList%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-243">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-244">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-244">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="bool ISet&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ISet&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As T) As Boolean Implements ISet(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ISet&lt;T&gt;.Add(T item) = System::Collections::Generic::ISet&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="8b3dc-245">要添加到集中的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-245">The element to add to the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-246">向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-246">Adds an element to the current set and returns a value to indicate if the element was successfully added.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-247">如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-247"><see langword="true" /> if the element is added to the set; <see langword="false" /> if the element is already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-248">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-248">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-249">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-249">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-250">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-250">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.ExceptWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.ExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.ExceptWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#ExceptWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub ExceptWith (other As IEnumerable(Of T)) Implements ISet(Of T).ExceptWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.ExceptWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::ExceptWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-251">要从集内移除的项的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-251">The collection of items to remove from the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-252">从当前集内移除指定集合中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-252">Removes all elements in the specified collection from the current set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-253">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-253">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-254">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-254">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-255">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-255">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.IntersectWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.IntersectWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.IntersectWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#IntersectWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub IntersectWith (other As IEnumerable(Of T)) Implements ISet(Of T).IntersectWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.IntersectWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::IntersectWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-256">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-256">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-257">修改当前集，使该集仅包含也存在在指定集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-257">Modifies the current set so that it contains only elements that are also in a specified collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-258">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-258">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-259">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-259">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-260">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-260">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.SymmetricExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub SymmetricExceptWith (other As IEnumerable(Of T)) Implements ISet(Of T).SymmetricExceptWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.SymmetricExceptWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::SymmetricExceptWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-261">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-261">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-262">修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-262">Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-263">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-263">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-264">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-264">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-265">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-265">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ISet&lt;T&gt;.UnionWith">
      <MemberSignature Language="C#" Value="void ISet&lt;T&gt;.UnionWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ISet&lt;T&gt;.UnionWith(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet&lt;T&gt;#UnionWith(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub UnionWith (other As IEnumerable(Of T)) Implements ISet(Of T).UnionWith" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ISet&lt;T&gt;.UnionWith(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Generic::ISet&lt;T&gt;::UnionWith;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-266">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-266">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-267">修改当前集，使该集包含当前集或指定集合中存在的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-267">Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-268">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-269">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Generic.ISet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-269">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Generic.ISet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-270">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-270">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8b3dc-271">一维数组，它是从集内复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-271">The one-dimensional array that is the destination of the elements copied from the set.</span></span> <span data-ttu-id="8b3dc-272">该数组的索引必须从零开始。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-272">The array must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="8b3dc-273"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-273">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8b3dc-274">从特定的数组索引开始，将集的元素复制到一个数组中。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-274">Copies the elements of the set to an array, starting at a particular array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-275">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-275">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-276">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.ICollection> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-276">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-277">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-277">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-278">请参阅 <see cref="T:System.Collections.ICollection" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-278">See the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-279">请参阅 <see cref="T:System.Collections.ICollection" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-279">See <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-280">返回循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-280">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-281">可用于循环访问集合的枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-281">An enumerator object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-282">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-282">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-283">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-283">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-284">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-284">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-285">要添加到集内的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-285">The object to add to the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-286">将某项添加到集内。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-286">Adds an item to the set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-287">插入了新元素的位置，-1 指示该项未插入到集合中。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-287">The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-288">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-288">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-289">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-289">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-290">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-290">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8b3dc-291">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-291">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-292">从集内中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-292">Removes all items from the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-293">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-294">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-294">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-295">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-295">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8b3dc-296">在所有情况下均引发。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-296">Thrown in all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-297">要在集内查找的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-297">The object to locate in the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-298">确定集是否包含特定值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-298">Determines whether the set contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-299">如果在集内找到该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-299"><see langword="true" /> if the object is found in the set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-300">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-300">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-301">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-301">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-302">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-302">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-303">要在集内查找的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-303">The object to locate in the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-304">确定集内特定项的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-304">Determines the index of a specific item in the set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-305">如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-305">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-306">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-307">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-307">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-308">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-308">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-309">应插入 <paramref name="value" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-309">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="8b3dc-310">要插入到集内的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-310">The object to insert into the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-311">在集内指定索引的位置插入项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-311">Inserts an item into the set at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-312">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-313">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-313">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-314">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-314">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8b3dc-315">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-315">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-316">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-316">Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="8b3dc-317">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-317"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b3dc-318">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-318">Gets a value that indicates whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="8b3dc-319">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-319"><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-320">索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-320">The index.</span></span></param>
        <summary><span data-ttu-id="8b3dc-321">获取或设置指定索引处的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-321">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span></span></summary>
        <value><span data-ttu-id="8b3dc-322"><see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-322">The <see cref="T:System.Object" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-323">要从集内移除的对象。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-323">The object to remove from the set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-324">从集内移除特定对象的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-324">Removes the first occurrence of a specific object from the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-325">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-325">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-326">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-326">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-327">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-327">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8b3dc-328">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-328">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8b3dc-329">要移除的项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-329">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="8b3dc-330">移除集内指定索引处的项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-330">Removes the item at the specified index of the set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-331">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-331">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-332">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.IList> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-332">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.IList> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-333">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-333">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8b3dc-334">该集为只读，或具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-334">The set is read-only or has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-335">要添加的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-335">The element to add.</span></span></param>
        <summary><span data-ttu-id="8b3dc-336">将指定的元素添加到此不可变集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-336">Adds the specified element to this immutable set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-337">已添加元素的新集，或者此集（如果该元素已在此集内）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-337">A new set with the element added, or this set if the element is already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-338">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-338">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-339">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-339">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-340">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-340">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableSet(Of T) Implements IImmutableSet(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-341">检索排序和顺序语义与此实例相同的空不可变集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-341">Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-342">排序和顺序语义与此实例相同的空集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-342">An empty set that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-343">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-343">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-344">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-344">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-345">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-345">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Except (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Except" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Except;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-346">要从此集内移除的项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-346">The items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-347">从当前不可变集内移除指定集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-347">Removes the elements in the specified collection from the current immutable set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-348">已移除项的新集；如果原始集不包含任何项，则为原始集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-348">The new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-349">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-349">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-350">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-350">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-351">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-351">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Intersect (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Intersect" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Intersect;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-352">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-352">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-353">创建一个不可变集，其中包含同时存在于此集和指定集内的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-353">Creates an immutable set that contains elements that exist in both this set and the specified set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-354">一个新的不可变集，其中包含同时存在于两个集内的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-354">A new immutable set that contains any elements that exist in both sets.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-355">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-355">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-356">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-356">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-357">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-357">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Remove(T value) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b3dc-358">要移除的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-358">The element to remove.</span></span></param>
        <summary><span data-ttu-id="8b3dc-359">从此不可变集内移除指定的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-359">Removes the specified element from this immutable set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-360">已移除指定元素的新集，或者当前集（如果在该集内找不到该元素）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-360">A new set with the specified element removed, or the current set if the element cannot be found in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-361">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-361">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-362">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-362">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-363">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-363">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function SymmetricExcept (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).SymmetricExcept" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::SymmetricExcept;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-364">要与当前集进行比较的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-364">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="8b3dc-365">创建一个不可变集，该集仅包含存在于当前集或指定集合（但不同时存在于两者中）中的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-365">Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-366">一个新集，该集包含仅存在于当前集或指定集合中（但不同时存在于两者中）的元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-366">A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-367">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-367">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-368">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-368">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-369">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-369">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableSet&lt;T&gt; IImmutableSet&lt;T&gt;.Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet&lt;T&gt;#Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Union (other As IEnumerable(Of T)) As IImmutableSet(Of T) Implements IImmutableSet(Of T).Union" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ System.Collections.Immutable.IImmutableSet&lt;T&gt;.Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other) = System::Collections::Immutable::IImmutableSet&lt;T&gt;::Union;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-370">从中添加元素的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-370">The collection to add elements from.</span></span></param>
        <summary><span data-ttu-id="8b3dc-371">创建一个新的不可变集，该集包含存在于当前集或指定集合中的所有元素。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-371">Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-372">已添加项的新不可变集；或者原始集（如果所有项已在该集内）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-372">A new immutable set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-373">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-373">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8b3dc-374">它只能在 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 实例被强制转换为 <xref:System.Collections.Immutable.IImmutableSet%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-374">It can be used only when the <xref:System.Collections.Immutable.ImmutableSortedSet%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableSet%601> interface.</span></span>  
  
 <span data-ttu-id="8b3dc-375">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-375">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableSortedSet(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;.Builder" Usage="immutableSortedSet.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b3dc-376">创建一个其内容与此不可变排序集相同，并且可使用标准可变接口有效操作的集合。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-376">Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-377">排序集生成器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-377">The sorted set builder.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-378">如果需要对不可变集合执行多个操作，为了提高效率，您可以使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> 方法将 <xref:System.Collections.Immutable.ImmutableSortedSet%601> 复制到 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>，并使用 <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> 方法对其进行操作并使其再次成为不可变的。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-378">If you need to perform multiple operations on an immutable collection, to increase efficiency you can copy the <xref:System.Collections.Immutable.ImmutableSortedSet%601> to a <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder>, using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.ToBuilder%2A> method, manipulate the set and make it immutable again using the <xref:System.Collections.Immutable.ImmutableSortedSet%601.Builder.ToImmutable%2A> method.</span></span> <span data-ttu-id="8b3dc-379">这不会更改原始的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-379">This will not change the original immutable sorted set.</span></span>  
  
 <span data-ttu-id="8b3dc-380">这是一项 O （1）操作，只会导致一个（小）内存分配。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-380">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="8b3dc-381">返回的可变集合不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-381">The mutable collection that is returned is not thread safe.</span></span>  
  
 <span data-ttu-id="8b3dc-382">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-382">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (T equalValue, out T actualValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!T equalValue, [out] !T&amp; actualValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (equalValue As T, ByRef actualValue As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(T equalValue, [Runtime::InteropServices::Out] T % actualValue);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'T * 'T -&gt; bool&#xA;override this.TryGetValue : 'T * 'T -&gt; bool" Usage="immutableSortedSet.TryGetValue (equalValue, actualValue)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equalValue" Type="T" />
        <Parameter Name="actualValue" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="equalValue"><span data-ttu-id="8b3dc-383">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-383">The value to search for.</span></span></param>
        <param name="actualValue"><span data-ttu-id="8b3dc-384">搜索操作在集内找到的值；如果搜索操作未生成任何匹配项，则返回原始值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-384">The value from the set that the search found, or the original value if the search yielded no match.</span></span></param>
        <summary><span data-ttu-id="8b3dc-385">在集内搜索给定的值，并返回所找到的相等值（如果有）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-385">Searches the set for a given value and returns the equal value it finds, if any.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-386">一个指示搜索是否成功的值。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-386">A value indicating whether the search was successful.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-387">当您想要重用以前存储的引用而不是新构造的引用时，这可能很有用（以便可以进行更多的引用共享）或查找具有比当前值更完整的数据的值，尽管它们的比较器函数指示它们相等。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-387">This can be useful when you want to reuse a previously stored reference instead of a newly constructed one (so that more sharing of references can occur) or to look up a value that has more complete data than the value you currently have, although their comparer functions indicate they are equal.</span></span>  
  
 <span data-ttu-id="8b3dc-388">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-388">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (other As IEnumerable(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="member this.Union : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.Union other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8b3dc-389">要添加的项。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-389">The items to add.</span></span></param>
        <summary><span data-ttu-id="8b3dc-390">将一组给定项添加到此不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-390">Adds a given set of items to this immutable sorted set.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-391">已添加项的新集；或者原始集（如果所有项已在该集内）。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-391">The new set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-392">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-392">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithComparer">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableSortedSet&lt;T&gt; WithComparer (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableSortedSet`1&lt;!T&gt; WithComparer(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function WithComparer (comparer As IComparer(Of T)) As ImmutableSortedSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableSortedSet&lt;T&gt; ^ WithComparer(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.WithComparer : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableSortedSet&lt;'T&gt;" Usage="immutableSortedSet.WithComparer comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableSortedSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="8b3dc-393">要检查的比较器。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-393">The comparer to check for.</span></span></param>
        <summary><span data-ttu-id="8b3dc-394">返回具有指定键比较器的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-394">Returns the immutable sorted set that has the specified key comparer.</span></span></summary>
        <returns><span data-ttu-id="8b3dc-395">具有指定键比较器的不可变排序集。</span><span class="sxs-lookup"><span data-stu-id="8b3dc-395">The immutable sorted set that has the specified key comparer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8b3dc-396">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>（<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">关于不可变集合和安装方法</see>）</span><span class="sxs-lookup"><span data-stu-id="8b3dc-396">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
