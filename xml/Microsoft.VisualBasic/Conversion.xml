<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="679d22da29cce4fdcf5475a63cc5ad153c370d08" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73377235" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="80db1-101"><see langword="Conversion" /> 模块包含用于执行各种转换操作的过程。</span><span class="sxs-lookup"><span data-stu-id="80db1-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-102">此模块支持 Visual Basic 语言关键字和运行库成员，这些关键字将十进制数字转换为其他基项、将数字转换为字符串，将字符串转换为数字，将一种数据类型转换为另一种数据类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-103">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-104">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="80db1-105">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="80db1-106">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="80db1-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="80db1-107">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="80db1-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="80db1-108">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="80db1-109">将对象转换为指定类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="80db1-110">一个对象，其类型在运行时为请求的目标类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-111">`CTypeDynamic` 方法将作为 `Expression` 参数传递的对象转换为 `TargetType` 参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="80db1-112">如果对象是动态对象，则 `CTypeDynamic` 方法会应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="80db1-113">`CTypeDynamic` 方法根据对象本身定义的转换语义应用动态转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="80db1-114">如果动态对象从 <xref:System.Dynamic.DynamicObject>继承，则 `CTypeDynamic` 方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="80db1-115">如果用户定义的静态转换失败，`CTypeDynamic` 方法将尝试使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="80db1-116">如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider>，则 `CTypeDynamic` 方法优先于用户定义的静态转换的动态转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-117">下面的示例使用 `CTypeDynamic` 方法，通过使用由动态对象定义的转换，将动态对象转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="80db1-118">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="80db1-119">演练：创建和使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="80db1-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="80db1-120">该对象要转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="80db1-121">要转换的对象。</span><span class="sxs-lookup"><span data-stu-id="80db1-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="80db1-122">将对象转换为指定的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="80db1-123">静态类型化为请求的泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="80db1-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-124">`CTypeDynamic` 方法将作为 `Expression` 参数传递的对象转换为泛型参数的类型所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="80db1-125">如果对象是动态对象，则 `CTypeDynamic` 方法会应用可用的动态转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="80db1-126">`CTypeDynamic` 方法根据对象本身定义的转换语义应用动态转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="80db1-127">如果动态对象从 <xref:System.Dynamic.DynamicObject>继承，则 `CTypeDynamic` 方法首先尝试使用用户定义的静态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="80db1-128">如果用户定义的静态转换失败，`CTypeDynamic` 方法将尝试使用动态转换执行转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="80db1-129">如果动态对象实现 <xref:System.Dynamic.IDynamicMetaObjectProvider>，则 `CTypeDynamic` 方法优先于用户定义的静态转换的动态转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-130">下面的示例使用 `CTypeDynamic` 方法，通过使用由动态对象定义的转换，将动态对象转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="80db1-131">使用动态对象 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="80db1-132">演练：创建和使用动态对象（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="80db1-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80db1-133">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="80db1-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString() cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="80db1-134">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="80db1-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="80db1-135">对应于最新运行时错误的错误消息。</span><span class="sxs-lookup"><span data-stu-id="80db1-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-136">`ErrorToString` 函数检查 `Err` 对象的属性设置以确定最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="80db1-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="80db1-137">`ErrorToString` 函数的返回值对应于 `Err` 对象的 `Description` 属性。</span><span class="sxs-lookup"><span data-stu-id="80db1-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="80db1-138">如果未发生运行时错误，`ErrorToString` 将返回一个长度为零的字符串（""）。</span><span class="sxs-lookup"><span data-stu-id="80db1-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="80db1-139">在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。</span><span class="sxs-lookup"><span data-stu-id="80db1-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-140">下面的代码使用 `ErrorToString` 函数显示与指定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="80db1-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-141"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="80db1-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="80db1-142">可选。</span><span class="sxs-lookup"><span data-stu-id="80db1-142">Optional.</span></span> <span data-ttu-id="80db1-143">任何有效的错误号。</span><span class="sxs-lookup"><span data-stu-id="80db1-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="80db1-144">返回与给定的错误号对应的错误信息。</span><span class="sxs-lookup"><span data-stu-id="80db1-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="80db1-145">与给定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="80db1-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-146">`ErrorToString` 函数检查 `Err` 对象的属性设置以确定最新的运行时错误。</span><span class="sxs-lookup"><span data-stu-id="80db1-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="80db1-147">`ErrorToString` 函数的返回值对应于 `Err` 对象的 `Description` 属性。</span><span class="sxs-lookup"><span data-stu-id="80db1-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="80db1-148">如果 `ErrorNumber` 是有效的错误号，但未定义，则 `ErrorToString` 返回字符串 `"Application-defined or object-defined error."` 如果 `ErrorNumber` 无效，则会发生错误。</span><span class="sxs-lookup"><span data-stu-id="80db1-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="80db1-149">如果省略 `ErrorNumber`，则返回与最新的运行时错误相对应的消息。</span><span class="sxs-lookup"><span data-stu-id="80db1-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="80db1-150">如果未发生运行时错误或 `ErrorNumber` 为0，则 `ErrorToString` 返回一个长度为零的字符串（""）。</span><span class="sxs-lookup"><span data-stu-id="80db1-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="80db1-151">在 Visual Basic 版本6.0 及更早版本中，此功能由 `Error` 函数提供。</span><span class="sxs-lookup"><span data-stu-id="80db1-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-152">下面的代码使用 `ErrorToString` 函数显示与指定错误号对应的错误消息。</span><span class="sxs-lookup"><span data-stu-id="80db1-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-153"><paramref name="ErrorNumber" /> 超出范围。</span><span class="sxs-lookup"><span data-stu-id="80db1-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80db1-154">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-155">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-155">Required.</span></span> <span data-ttu-id="80db1-156"><see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-157">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-158">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-159">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-160">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-161">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-162">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="80db1-163">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-164">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-165">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-166">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-167">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-168">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-169">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-170">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-171">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-172">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-173">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-175">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-176">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-177">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-178">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Fix(float64 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-179">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-179">Required.</span></span> <span data-ttu-id="80db1-180"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-181">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-182">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-183">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-184">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-185">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-186">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="80db1-187">从 Visual Basic 15.8 开始，如果将由 `Fix` 方法返回的值传递到任何[整型转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者 `Fix` 返回的 `Double` 值为，则将优化 `Double`到整数转换的性能。隐式转换为[选项 Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 `Off`的整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="80db1-188">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="80db1-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="80db1-189">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="80db1-190">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-191">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-192">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-193">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-194">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-195">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-196">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-197">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-198">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-199">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-200">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-202">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-203">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-204">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-205">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Fix(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-206">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-206">Required.</span></span> <span data-ttu-id="80db1-207"><see langword="Short" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-208">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-209">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-210">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-211">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-212">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-213">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-214">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-215">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-216">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-217">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-218">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-219">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-220">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-221">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-222">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-223">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-224">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-226">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-227">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-228">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-229">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Fix(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-230">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-230">Required.</span></span> <span data-ttu-id="80db1-231"><see langword="Integer" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-232">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-233">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-234">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-235">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-236">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-237">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-238">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-239">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-240">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-241">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-242">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-243">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-244">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-245">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-246">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-247">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-248">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-250">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-251">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-252">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-253">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Fix(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-254">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-254">Required.</span></span> <span data-ttu-id="80db1-255"><see langword="Long" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-256">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-257">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-258">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-259">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-260">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-261">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-262">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-263">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-264">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-265">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-266">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-267">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-268">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-269">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-270">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-271">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-272">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-274">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-275">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-276">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-277">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Fix(object Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-278">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-278">Required.</span></span> <span data-ttu-id="80db1-279"><see langword="Object" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="80db1-280">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="80db1-281">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-282">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-283">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-284">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-285">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-286">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="80db1-287">从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，而该对象的运行时类型为 `Double` 或 `Single`，则在将 `Fix` 方法返回的值传递到任何[整型转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者，如果 `Fix` 返回的值自动转换为将[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off 的整数，则为。</span><span class="sxs-lookup"><span data-stu-id="80db1-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="80db1-288">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="80db1-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="80db1-289">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="80db1-290">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-291">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-292">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-293">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-294">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-295">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-296">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-297">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-298">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-299">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-300">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-302">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-303">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-304">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-305">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Fix(float32 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-306">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-306">Required.</span></span> <span data-ttu-id="80db1-307"><see langword="Single" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-308">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-309">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-310">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-311">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-312">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-313">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="80db1-314">从 Visual Basic 15.8 开始，如果将由 `Fix` 方法返回的值传递到任何[整型转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者 `Fix` 返回的 `Single` 值为，则将优化 `Single`到整数转换的性能。自动转换为[选项 "Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) " 设置为 "关闭" 的整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="80db1-315">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="80db1-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="80db1-316">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="80db1-317">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-318">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-319">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-320">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-321">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-322">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-323">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-324">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-325">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-326">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-327">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-329">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-330">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-331">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-332">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80db1-333">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-334">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-334">Required.</span></span> <span data-ttu-id="80db1-335">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-336">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-337">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-338">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-339">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-339">If `Number` is</span></span>|<span data-ttu-id="80db1-340">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-341">空</span><span class="sxs-lookup"><span data-stu-id="80db1-341">Empty</span></span>|<span data-ttu-id="80db1-342">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-342">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-343">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-343">Any numeric value</span></span>|<span data-ttu-id="80db1-344">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-345">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-346">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-347">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-348">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-349"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-351">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-352">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-352">Required.</span></span> <span data-ttu-id="80db1-353">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-354">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-355">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-356">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-357">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-357">If `Number` is</span></span>|<span data-ttu-id="80db1-358">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-359">空</span><span class="sxs-lookup"><span data-stu-id="80db1-359">Empty</span></span>|<span data-ttu-id="80db1-360">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-360">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-361">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-361">Any numeric value</span></span>|<span data-ttu-id="80db1-362">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-363">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-364">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-365">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-366">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-367"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-369">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-370">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-370">Required.</span></span> <span data-ttu-id="80db1-371">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-372">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-373">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-374">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-375">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-375">If `Number` is</span></span>|<span data-ttu-id="80db1-376">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-377">空</span><span class="sxs-lookup"><span data-stu-id="80db1-377">Empty</span></span>|<span data-ttu-id="80db1-378">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-378">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-379">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-379">Any numeric value</span></span>|<span data-ttu-id="80db1-380">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-381">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-382">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-383">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-384">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-385"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-387">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-388">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-388">Required.</span></span> <span data-ttu-id="80db1-389">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-390">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-391">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-392">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-393">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-393">If `Number` is</span></span>|<span data-ttu-id="80db1-394">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-395">空</span><span class="sxs-lookup"><span data-stu-id="80db1-395">Empty</span></span>|<span data-ttu-id="80db1-396">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-396">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-397">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-397">Any numeric value</span></span>|<span data-ttu-id="80db1-398">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-399">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-400">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-401">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-402">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-403"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-405">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(object Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-406">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-406">Required.</span></span> <span data-ttu-id="80db1-407">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-408">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-409">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-410">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-411">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-411">If `Number` is</span></span>|<span data-ttu-id="80db1-412">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-413">空</span><span class="sxs-lookup"><span data-stu-id="80db1-413">Empty</span></span>|<span data-ttu-id="80db1-414">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-414">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-415">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-415">Any numeric value</span></span>|<span data-ttu-id="80db1-416">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-417">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-418">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-419">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-420">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-421"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-423">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(int8 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-424">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-424">Required.</span></span> <span data-ttu-id="80db1-425">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-426">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-427">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-428">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-429">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-429">If `Number` is</span></span>|<span data-ttu-id="80db1-430">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-431">空</span><span class="sxs-lookup"><span data-stu-id="80db1-431">Empty</span></span>|<span data-ttu-id="80db1-432">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-432">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-433">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-433">Any numeric value</span></span>|<span data-ttu-id="80db1-434">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-435">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-436">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-437">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-438">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-439"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-441">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-442">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-442">Required.</span></span> <span data-ttu-id="80db1-443">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-444">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-445">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-446">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-447">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-447">If `Number` is</span></span>|<span data-ttu-id="80db1-448">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-449">空</span><span class="sxs-lookup"><span data-stu-id="80db1-449">Empty</span></span>|<span data-ttu-id="80db1-450">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-450">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-451">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-451">Any numeric value</span></span>|<span data-ttu-id="80db1-452">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-453">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-454">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-455">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-456">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-457"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-459">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-460">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-460">Required.</span></span> <span data-ttu-id="80db1-461">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-462">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-463">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-464">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-465">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-465">If `Number` is</span></span>|<span data-ttu-id="80db1-466">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-467">空</span><span class="sxs-lookup"><span data-stu-id="80db1-467">Empty</span></span>|<span data-ttu-id="80db1-468">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-468">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-469">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-469">Any numeric value</span></span>|<span data-ttu-id="80db1-470">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-471">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-472">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-473">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-474">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-475"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-477">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-478">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-478">Required.</span></span> <span data-ttu-id="80db1-479">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-480">返回表示数字的十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-481">表示某数十六进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-482">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-483">如果 `Number` 为</span><span class="sxs-lookup"><span data-stu-id="80db1-483">If `Number` is</span></span>|<span data-ttu-id="80db1-484">Hex 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-485">空</span><span class="sxs-lookup"><span data-stu-id="80db1-485">Empty</span></span>|<span data-ttu-id="80db1-486">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-486">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-487">任何数值</span><span class="sxs-lookup"><span data-stu-id="80db1-487">Any numeric value</span></span>|<span data-ttu-id="80db1-488">最多十六个十六进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="80db1-489">您可以使用 `&H`在适当范围内的数字前面直接表示十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="80db1-490">例如，`&H10` 表示十六进制表示法中的十进制数16。</span><span class="sxs-lookup"><span data-stu-id="80db1-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-491">此示例使用 `Hex` 函数返回数字的十六进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-492">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-493"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="80db1-495">如何：将十六进制字符串转换为数字</span><span class="sxs-lookup"><span data-stu-id="80db1-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80db1-496">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-497">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-497">Required.</span></span> <span data-ttu-id="80db1-498"><see langword="Decimal" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-499">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-500">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-501">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-502">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-503">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-504">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="80db1-505">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-506">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-507">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-508">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-509">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-510">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-511">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-512">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-513">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-514">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-515">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-517">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-518">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-519">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-520">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Int(float64 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-521">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-521">Required.</span></span> <span data-ttu-id="80db1-522"><see langword="Double" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-523">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-524">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-525">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-526">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-527">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-528">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="80db1-529">从 Visual Basic 15.8 开始，如果将 `Int` 方法返回的值传递到任何[整型转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者 `Int` 返回的双精度值，则将优化双精度转换的性能。自动转换为[选项 "Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) " 设置为 "关闭" 的整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="80db1-530">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="80db1-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="80db1-531">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="80db1-532">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-533">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-534">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-535">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-536">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-537">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-538">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-539">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-540">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-541">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-542">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-544">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-545">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-546">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-547">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Int(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-548">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-548">Required.</span></span> <span data-ttu-id="80db1-549"><see langword="Short" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-550">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-551">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-552">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-553">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-554">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-555">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-556">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-557">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-558">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-559">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-560">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-561">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-562">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-563">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-564">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-565">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-566">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-568">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-569">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-570">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-571">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Int(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-572">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-572">Required.</span></span> <span data-ttu-id="80db1-573"><see langword="Integer" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-574">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-575">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-576">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-577">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-578">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-579">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-580">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-581">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-582">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-583">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-584">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-585">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-586">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-587">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-588">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-589">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-590">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-592">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-593">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-594">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-595">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Int(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-596">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-596">Required.</span></span> <span data-ttu-id="80db1-597"><see langword="Long" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-598">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-599">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-600">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-601">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-602">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-603">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-604">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-605">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-606">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-607">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-608">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-609">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-610">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-611">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-612">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-613">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-614">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-616">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-617">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-618">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-619">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Int(object Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-620">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-620">Required.</span></span> <span data-ttu-id="80db1-621"><see langword="Object" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="80db1-622">如果 <paramref name="Number" /> 包含 <see langword="Nothing" />，则返回 <see langword="Nothing" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="80db1-623">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-624">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-625">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-626">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-627">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-628">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="80db1-629">从 Visual Basic 15.8 开始，如果 `Number` 参数是一个对象，而该对象的运行时类型为 `Double` 或 `Single`，则在将 `Int` 方法返回的值传递到任何[整型转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者，如果 `Int` 返回的值自动转换为将[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)设置为 Off 的整数，则为。</span><span class="sxs-lookup"><span data-stu-id="80db1-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="80db1-630">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="80db1-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="80db1-631">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="80db1-632">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-633">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-634">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-635">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-636">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-637">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-638">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-639">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-640">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-641">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-642">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-644">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-645">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-646">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-647">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Int(float32 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-648">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-648">Required.</span></span> <span data-ttu-id="80db1-649"><see langword="Single" /> 类型的数字或任何有效的数值表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-650">返回一个数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-651">数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-652">`Int` 和 `Fix` 函数都删除 `Number` 的小数部分，并返回生成的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="80db1-653">`Int` 和 `Fix` 函数之间的区别在于，如果 `Number` 为负，则 `Int` 返回小于或等于 `Number`的第一个负整数，而 `Fix` 返回大于或等于 `Number`的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="80db1-654">例如，`Int` 将-8.4 转换为-9，将 `Fix` 8.4 转换为-8。</span><span class="sxs-lookup"><span data-stu-id="80db1-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="80db1-655">`Fix(number)` 等效于 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="80db1-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="80db1-656">从 Visual Basic 15.8 开始，如果将由 `Int` 方法返回的值传递到任何[整型转换函数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)，或者 `Int` 返回的 `Single` 值为，则将优化 `Single`到整数转换的性能。自动转换为[选项 "Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) " 设置为 "关闭" 的整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="80db1-657">此优化使代码可以更快运行 -- 对于进行大量到整型类型的转换的代码，可快达两倍。</span><span class="sxs-lookup"><span data-stu-id="80db1-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="80db1-658">下面的示例演示了此类经过优化的转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="80db1-659">此示例说明 `Int` 和 `Fix` 函数如何返回数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="80db1-660">对于负数参数，`Int` 函数将返回小于或等于数字的第一个负整数;`Fix` 函数返回大于或等于数字的第一个负整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="80db1-661">下面的示例要求你指定 `Option Strict Off`，因为不允许在 `Option Strict On`下从类型 `Double` 到类型 `Integer` 的隐式转换：</span><span class="sxs-lookup"><span data-stu-id="80db1-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="80db1-662">您可以使用 `CInt` 函数将其他数据类型显式转换为 `Option Strict Off``Integer` 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="80db1-663">但 `CInt` 会舍入为最接近的整数，而不是截断数字的小数部分。</span><span class="sxs-lookup"><span data-stu-id="80db1-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="80db1-664">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="80db1-665">您可以对 `Fix` 或 `Int` 调用的结果使用 `CInt` 函数，以便在不进行舍入的情况下显式转换为整数。</span><span class="sxs-lookup"><span data-stu-id="80db1-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="80db1-666">例如:</span><span class="sxs-lookup"><span data-stu-id="80db1-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="80db1-667">有关 `CInt`的详细信息，请参阅[类型转换函数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)。</span><span class="sxs-lookup"><span data-stu-id="80db1-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-668">Number 未指定。</span><span class="sxs-lookup"><span data-stu-id="80db1-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-669">Number 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="80db1-671">数据类型摘要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="80db1-672">数学摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="80db1-673">数学函数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="80db1-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-674">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80db1-675">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-676">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-676">Required.</span></span> <span data-ttu-id="80db1-677">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-678">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-679">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-680">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-681">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-681">If Number is</span></span>|<span data-ttu-id="80db1-682">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-683">空</span><span class="sxs-lookup"><span data-stu-id="80db1-683">Empty</span></span>|<span data-ttu-id="80db1-684">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-684">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-685">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-685">Any other number</span></span>|<span data-ttu-id="80db1-686">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-687">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-688">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-689">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-690">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-691"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-692">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int16 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-694">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-694">Required.</span></span> <span data-ttu-id="80db1-695">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-696">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-697">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-698">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-699">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-699">If Number is</span></span>|<span data-ttu-id="80db1-700">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-701">空</span><span class="sxs-lookup"><span data-stu-id="80db1-701">Empty</span></span>|<span data-ttu-id="80db1-702">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-702">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-703">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-703">Any other number</span></span>|<span data-ttu-id="80db1-704">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-705">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-706">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-707">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-708">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-709"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-710">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int32 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-712">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-712">Required.</span></span> <span data-ttu-id="80db1-713">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-714">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-715">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-716">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-717">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-717">If Number is</span></span>|<span data-ttu-id="80db1-718">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-719">空</span><span class="sxs-lookup"><span data-stu-id="80db1-719">Empty</span></span>|<span data-ttu-id="80db1-720">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-720">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-721">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-721">Any other number</span></span>|<span data-ttu-id="80db1-722">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-723">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-724">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-725">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-726">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-727"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-728">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int64 Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-730">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-730">Required.</span></span> <span data-ttu-id="80db1-731">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-732">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-733">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-734">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-735">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-735">If Number is</span></span>|<span data-ttu-id="80db1-736">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-737">空</span><span class="sxs-lookup"><span data-stu-id="80db1-737">Empty</span></span>|<span data-ttu-id="80db1-738">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-738">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-739">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-739">Any other number</span></span>|<span data-ttu-id="80db1-740">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-741">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-742">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-743">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-744">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-745"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-746">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(object Number) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-748">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-748">Required.</span></span> <span data-ttu-id="80db1-749">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-750">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-751">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-752">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-753">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-753">If Number is</span></span>|<span data-ttu-id="80db1-754">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-755">空</span><span class="sxs-lookup"><span data-stu-id="80db1-755">Empty</span></span>|<span data-ttu-id="80db1-756">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-756">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-757">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-757">Any other number</span></span>|<span data-ttu-id="80db1-758">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-759">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-760">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-761">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-762">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-763"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-764">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(int8 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-766">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-766">Required.</span></span> <span data-ttu-id="80db1-767">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-768">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-769">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-770">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-771">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-771">If Number is</span></span>|<span data-ttu-id="80db1-772">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-773">空</span><span class="sxs-lookup"><span data-stu-id="80db1-773">Empty</span></span>|<span data-ttu-id="80db1-774">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-774">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-775">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-775">Any other number</span></span>|<span data-ttu-id="80db1-776">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-777">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-778">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-779">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-780">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-781"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-782">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-784">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-784">Required.</span></span> <span data-ttu-id="80db1-785">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-786">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-787">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-788">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-789">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-789">If Number is</span></span>|<span data-ttu-id="80db1-790">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-791">空</span><span class="sxs-lookup"><span data-stu-id="80db1-791">Empty</span></span>|<span data-ttu-id="80db1-792">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-792">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-793">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-793">Any other number</span></span>|<span data-ttu-id="80db1-794">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-795">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-796">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-797">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-798">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-799"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-800">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-802">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-802">Required.</span></span> <span data-ttu-id="80db1-803">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-804">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-805">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-806">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-807">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-807">If Number is</span></span>|<span data-ttu-id="80db1-808">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-809">空</span><span class="sxs-lookup"><span data-stu-id="80db1-809">Empty</span></span>|<span data-ttu-id="80db1-810">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-810">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-811">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-811">Any other number</span></span>|<span data-ttu-id="80db1-812">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-813">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-814">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-815">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-816">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-817"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-818">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-820">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-820">Required.</span></span> <span data-ttu-id="80db1-821">任何有效的数值表达式或 <see langword="String" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="80db1-822">返回表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-823">表示某数八进制值的字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-824">如果 `Number` 不是整数，则在计算之前，它将舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="80db1-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="80db1-825">如果 Number 为</span><span class="sxs-lookup"><span data-stu-id="80db1-825">If Number is</span></span>|<span data-ttu-id="80db1-826">Oct 返回</span><span class="sxs-lookup"><span data-stu-id="80db1-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="80db1-827">空</span><span class="sxs-lookup"><span data-stu-id="80db1-827">Empty</span></span>|<span data-ttu-id="80db1-828">零（0）</span><span class="sxs-lookup"><span data-stu-id="80db1-828">Zero (0)</span></span>|  
|<span data-ttu-id="80db1-829">任何其他数字</span><span class="sxs-lookup"><span data-stu-id="80db1-829">Any other number</span></span>|<span data-ttu-id="80db1-830">最多22个八进制字符</span><span class="sxs-lookup"><span data-stu-id="80db1-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="80db1-831">您可以使用 `&O`在适当范围内的数字前面直接表示八进制数。</span><span class="sxs-lookup"><span data-stu-id="80db1-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="80db1-832">例如，`&O10` 是十进制8的八进制表示法。</span><span class="sxs-lookup"><span data-stu-id="80db1-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-833">此示例使用 `Oct` 函数返回数字的八进制值。</span><span class="sxs-lookup"><span data-stu-id="80db1-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-834">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-835"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-836">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Str(object Number) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="80db1-838">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-838">Required.</span></span> <span data-ttu-id="80db1-839">包含任何有效的数值表达式的 <see langword="Object" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="80db1-840">返回数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="80db1-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="80db1-841">数字的 <see langword="String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="80db1-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-842">当数字转换为字符串时，将始终为 `Number`的符号保留前导空格。</span><span class="sxs-lookup"><span data-stu-id="80db1-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="80db1-843">如果 `Number` 为正，则返回的字符串将包含前导空格，并暗含正负号。</span><span class="sxs-lookup"><span data-stu-id="80db1-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="80db1-844">负数将包括负号（-），无前导空格。</span><span class="sxs-lookup"><span data-stu-id="80db1-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="80db1-845">使用 `Format` 函数可以将您要设置格式的数字值转换为日期、时间、货币或其他用户定义格式。</span><span class="sxs-lookup"><span data-stu-id="80db1-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="80db1-846">与 `Str` 函数不同，`Format` 函数不包括前导空格用于 `Number`的符号。</span><span class="sxs-lookup"><span data-stu-id="80db1-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80db1-847">`Str` 函数仅将句点（`.`）识别为有效的小数点分隔符。</span><span class="sxs-lookup"><span data-stu-id="80db1-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="80db1-848">如果使用不同的小数分隔符（例如，在国际应用程序中），请使用 `CStr` 或 `Format` 函数将数字转换为字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="80db1-849">若要获取特定区域性中的数字的字符串表示形式，请使用该数字的 `ToString(IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="80db1-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="80db1-850">例如，将 `Double` 类型的值转换为字符串时，请使用 <xref:System.Double.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="80db1-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80db1-851">此示例使用 `Str` 函数返回数字的 `String` 表示形式。</span><span class="sxs-lookup"><span data-stu-id="80db1-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="80db1-852">当正数转换为字符串时，将始终为其符号保留前导空格。</span><span class="sxs-lookup"><span data-stu-id="80db1-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80db1-853">未指定 <paramref name="Number" />。</span><span class="sxs-lookup"><span data-stu-id="80db1-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="80db1-854"><paramref name="Number" /> 不是 Numeric 类型。</span><span class="sxs-lookup"><span data-stu-id="80db1-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="80db1-855">转换摘要</span><span class="sxs-lookup"><span data-stu-id="80db1-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80db1-857">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="80db1-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Val(char Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="80db1-858">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-858">Required.</span></span> <span data-ttu-id="80db1-859">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="80db1-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="80db1-860">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="80db1-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="80db1-861">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="80db1-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="80db1-862">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-863">`Val` 函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="80db1-864">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="80db1-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="80db1-865">但是，该函数识别基数前缀 `&O` （对于八进制）和 `&H` （十六进制）。</span><span class="sxs-lookup"><span data-stu-id="80db1-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="80db1-866">从参数中去除空格、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="80db1-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="80db1-867">以下调用返回值1615198。</span><span class="sxs-lookup"><span data-stu-id="80db1-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="80db1-868">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="80db1-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="80db1-869">`Val` 函数仅将句点（`.`）识别为有效的小数点分隔符。</span><span class="sxs-lookup"><span data-stu-id="80db1-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="80db1-870">当使用不同的小数点分隔符时，与在国际应用程序中一样，请改用 `CDbl` 或 `CInt` 来将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="80db1-871">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="80db1-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="80db1-872">例如，在将字符串转换为 `Double`时，使用 <xref:System.Double.Parse%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="80db1-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="80db1-873">为了响应某些不常见的数字格式，可能会引发 <xref:System.InvalidCastException> 异常。</span><span class="sxs-lookup"><span data-stu-id="80db1-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="80db1-874">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="80db1-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="80db1-875">如果格式不包含在字符串中，则编译器将捕获格式化为 `Double` 的数字与 `Integer` 和 `Long` 类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="80db1-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="80db1-876">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="80db1-877">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="80db1-878"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="80db1-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-879"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(object Expression) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="80db1-881">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-881">Required.</span></span> <span data-ttu-id="80db1-882">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="80db1-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="80db1-883">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="80db1-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="80db1-884">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="80db1-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="80db1-885">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-886">`Val` 函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="80db1-887">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="80db1-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="80db1-888">但是，该函数识别基数前缀 `&O` （对于八进制）和 `&H` （十六进制）。</span><span class="sxs-lookup"><span data-stu-id="80db1-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="80db1-889">将从自变量中删除空白、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="80db1-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="80db1-890">以下调用返回值1234123。</span><span class="sxs-lookup"><span data-stu-id="80db1-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="80db1-891">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="80db1-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="80db1-892">`Val` 函数仅将句点（`.`）识别为有效的小数点分隔符。</span><span class="sxs-lookup"><span data-stu-id="80db1-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="80db1-893">使用其他小数点分隔符时，与在国际应用程序中一样，请改用 `CDbl` 或 `CInt` 来将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="80db1-894">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="80db1-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="80db1-895">例如，在将字符串转换为 `Double`时，使用 <xref:System.Double.Parse%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="80db1-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80db1-896">为了响应某些不常见的数字格式，可能会引发 <xref:System.InvalidCastException> 异常。</span><span class="sxs-lookup"><span data-stu-id="80db1-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="80db1-897">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="80db1-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="80db1-898">如果冲突未包含在字符串中，则编译器将捕获格式化为 `Double` 的数字与 `Integer` 和 `Long` 类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="80db1-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="80db1-899">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="80db1-900">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="80db1-901"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="80db1-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-902"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Val(string InputStr) cil managed" FrameworkAlternate="netcore-3.0;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="80db1-904">必需。</span><span class="sxs-lookup"><span data-stu-id="80db1-904">Required.</span></span> <span data-ttu-id="80db1-905">任何有效的 <see langword="String" /> 表达式、<see langword="Object" /> 变量或 <see langword="Char" /> 值。</span><span class="sxs-lookup"><span data-stu-id="80db1-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="80db1-906">如果 <paramref name="Expression" /> 属于类型 <see langword="Object" />，其值必须可转换为 <see langword="String" />，否则将发生 <see cref="T:System.ArgumentException" /> 错误。</span><span class="sxs-lookup"><span data-stu-id="80db1-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="80db1-907">将字符串中包含的数字作为适当类型的数值返回。</span><span class="sxs-lookup"><span data-stu-id="80db1-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="80db1-908">字符串中包含的作为适当类型数值的数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80db1-909">`Val` 函数在其无法识别为数字一部分的第一个字符处停止读取字符串。</span><span class="sxs-lookup"><span data-stu-id="80db1-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="80db1-910">不识别经常被视为数值部分的符号和字符，如美元符号和逗号。</span><span class="sxs-lookup"><span data-stu-id="80db1-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="80db1-911">但是，该函数识别基数前缀 `&O` （对于八进制）和 `&H` （十六进制）。</span><span class="sxs-lookup"><span data-stu-id="80db1-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="80db1-912">将从自变量中删除空白、制表符和换行符。</span><span class="sxs-lookup"><span data-stu-id="80db1-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="80db1-913">以下调用返回值1234123。</span><span class="sxs-lookup"><span data-stu-id="80db1-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="80db1-914">以下调用返回十进制值-1。</span><span class="sxs-lookup"><span data-stu-id="80db1-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="80db1-915">`Val` 函数仅将句点（`.`）识别为有效的小数点分隔符。</span><span class="sxs-lookup"><span data-stu-id="80db1-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="80db1-916">使用其他小数点分隔符时，与在国际应用程序中一样，请改用 `CDbl` 或 `CInt` 来将字符串转换为数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="80db1-917">若要将特定区域性中的数字的字符串表示形式转换为数值，请使用数值类型的 `Parse(String, IFormatProvider)` 方法。</span><span class="sxs-lookup"><span data-stu-id="80db1-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="80db1-918">例如，在将字符串转换为 `Double`时，使用 <xref:System.Double.Parse%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="80db1-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="80db1-919">为了响应某些不常见的数字格式，可能会引发 <xref:System.InvalidCastException> 异常。</span><span class="sxs-lookup"><span data-stu-id="80db1-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="80db1-920">例如，下面的代码引发此异常。</span><span class="sxs-lookup"><span data-stu-id="80db1-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="80db1-921">如果冲突未包含在字符串中，则编译器将捕获格式化为 `Double` 的数字与 `Integer` 和 `Long` 类型字符之间的冲突。</span><span class="sxs-lookup"><span data-stu-id="80db1-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="80db1-922">下面的示例使用 `Val` 函数返回每个字符串中包含的数字。</span><span class="sxs-lookup"><span data-stu-id="80db1-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="80db1-923">`Val` 在无法解释为数字、数字修饰符、数字标点或空格的第一个字符处停止转换。</span><span class="sxs-lookup"><span data-stu-id="80db1-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="80db1-924"><paramref name="InputStr" /> 太大。</span><span class="sxs-lookup"><span data-stu-id="80db1-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="80db1-925"><paramref name="Expression" /> 是不可转换为 <see langword="String" /> 的 <see langword="Object" /> 类型表达式。</span><span class="sxs-lookup"><span data-stu-id="80db1-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="80db1-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="80db1-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
