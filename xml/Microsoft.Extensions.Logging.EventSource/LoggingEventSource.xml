<Type Name="LoggingEventSource" FullName="Microsoft.Extensions.Logging.EventSource.LoggingEventSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6971d9c39297efc4e895f22b6d96a3785890c8e9" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73408403" /></Metadata><TypeSignature Language="C#" Value="public sealed class LoggingEventSource : System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LoggingEventSource extends System.Diagnostics.Tracing.EventSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.EventSource.LoggingEventSource" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LoggingEventSource&#xA;Inherits EventSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoggingEventSource sealed : System::Diagnostics::Tracing::EventSource" />
  <TypeSignature Language="F#" Value="type LoggingEventSource = class&#xA;    inherit EventSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Tracing.EventSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-3.0">
      <AttributeName>System.Diagnostics.Tracing.EventSource(Name="Microsoft-Extensions-Logging")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="01cea-101">LoggingEventSource 是连接所有基于 ILogger 的日志记录和 EventSource/EventListener 日志记录的桥。</span><span class="sxs-lookup"><span data-stu-id="01cea-101">The LoggingEventSource is the bridge from all ILogger based logging to EventSource/EventListener logging.</span></span>
            
<span data-ttu-id="01cea-102">启用以下名称的 EventSource 即可启用此日志记录</span><span class="sxs-lookup"><span data-stu-id="01cea-102">You turn this logging on by enabling the EventSource called</span></span> 
<span data-ttu-id="01cea-103">Microsoft-Extensions-Logging</span><span class="sxs-lookup"><span data-stu-id="01cea-103">Microsoft-Extensions-Logging</span></span> 
<span data-ttu-id="01cea-104">启用 EventSource 后，你设置的 EventLevel 将以明显的方式转换为与 ILogger 关联的级别（因此 Debug = verbose、Informational = Informational ...Critical == Critical）</span><span class="sxs-lookup"><span data-stu-id="01cea-104">When you enabled the EventSource, the EventLevel you set is translated in the obvious way to the level associated with the ILogger (thus Debug = verbose, Informational = Informational ... Critical == Critical)</span></span> 
<span data-ttu-id="01cea-105">这使你可以通过简单的方式按事件级别进行筛选。</span><span class="sxs-lookup"><span data-stu-id="01cea-105">This allows you to filter by event level in a straightforward way.</span></span>
            
<span data-ttu-id="01cea-106">为了更好地进行控制，可以指定以下名称的 EventSource 参数</span><span class="sxs-lookup"><span data-stu-id="01cea-106">For finer control you can specify a EventSource Argument called</span></span> 
<span data-ttu-id="01cea-107">FilterSpecs</span><span class="sxs-lookup"><span data-stu-id="01cea-107">FilterSpecs</span></span> 
<span data-ttu-id="01cea-108">FilterSpecs 参数是以分号分隔的规范列表。</span><span class="sxs-lookup"><span data-stu-id="01cea-108">The FilterSpecs argument is a semicolon separated list of specifications.</span></span>   <span data-ttu-id="01cea-109">其中每个规范都为</span><span class="sxs-lookup"><span data-stu-id="01cea-109">Where each specification is</span></span> 
<span data-ttu-id="01cea-110">SPEC =                          // 空规范，与 \* 相同 | NAME                     // 只是名称，级别为默认级别 | NAME :LEVEL            // 指定特定记录器的级别（可以有 \* 后缀）。</span><span class="sxs-lookup"><span data-stu-id="01cea-110">SPEC =                          // empty spec, same as \* | NAME                     // Just a name the level is the default level | NAME : LEVEL            // specifies level for a particular logger (can have a \* suffix).</span></span>
            
<span data-ttu-id="01cea-111">其中 Name 是 ILoggger 的名称（区分大小写），Name 可以有 \*，以后缀形式充当通配符。</span><span class="sxs-lookup"><span data-stu-id="01cea-111">Where Name is the name of a ILoggger (case matters), Name can have a \* which acts as a wildcard AS A SUFFIX.</span></span>   <span data-ttu-id="01cea-112">因此 Net\* 将匹配以“Net”开头的所有记录器。</span><span class="sxs-lookup"><span data-stu-id="01cea-112">Thus Net\* will match any loggers that start with the 'Net'.</span></span>
            
<span data-ttu-id="01cea-113">LEVEL 为数字或 LogLevel 字符串。</span><span class="sxs-lookup"><span data-stu-id="01cea-113">The LEVEL is a number or a LogLevel string.</span></span> <span data-ttu-id="01cea-114">0 = 跟踪，1 = 调试，2 = 信息，3 = 警告，4 = 错误，严重 = 5，指定关联模式的级别。</span><span class="sxs-lookup"><span data-stu-id="01cea-114">0=Trace, 1=Debug, 2=Information, 3=Warning,  4=Error, Critical=5 This specifies the level for the associated pattern.</span></span>  <span data-ttu-id="01cea-115">如果未指定数字（规范的第一种形式），则为 EventSource 的默认级别。</span><span class="sxs-lookup"><span data-stu-id="01cea-115">If the number is not specified, (first form of the specification) it is the default level for the EventSource.</span></span>
            
<span data-ttu-id="01cea-116">如果某个特定名称与多个模式匹配，则使用第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="01cea-116">First match is used if a particular name matches more than one pattern.</span></span>
            
<span data-ttu-id="01cea-117">除了 level 和 FilterSpec 参数，还可以设置 EventSource 关键字。</span><span class="sxs-lookup"><span data-stu-id="01cea-117">In addition the level and FilterSpec argument, you can also set EventSource Keywords.</span></span>  <span data-ttu-id="01cea-118">请参阅下面的关键字定义，但基本上你可决定是否要使用该关键字</span><span class="sxs-lookup"><span data-stu-id="01cea-118">See the Keywords definition below, but basically you get to decide if you wish to have</span></span> 
<span data-ttu-id="01cea-119">\* Keywords.Message - 获取的事件所具有的数据采用已解析形式。</span><span class="sxs-lookup"><span data-stu-id="01cea-119">\* Keywords.Message - You get the event with the data in parsed form.</span></span>
<span data-ttu-id="01cea-120">\* Keywords.JsonMessage - 获取的事件所具有的数据采用已解析形式，但采用 JSON blob 的形式（未被参数破坏 ...）\* Keywords.FormattedMessage - 获取的事件所具有的数据设置为字符串格式</span><span class="sxs-lookup"><span data-stu-id="01cea-120">\* Keywords.JsonMessage - you get an event with the data in parse form but as a JSON blob (not broken up by argument ...) \* Keywords.FormattedMessage - you get an event with the data formatted as a string</span></span> 
<span data-ttu-id="01cea-121">你应一次只启用其中一个关键字，但可将其全部启用（并以三种不同的方式记录相同的数据）。</span><span class="sxs-lookup"><span data-stu-id="01cea-121">It is expected that you will turn only one of these keywords on at a time, but you can turn them all on (and get the same data logged three different ways.</span></span>
            
<span data-ttu-id="01cea-122">示例用法</span><span class="sxs-lookup"><span data-stu-id="01cea-122">Example Usage</span></span> 
<span data-ttu-id="01cea-123">此示例演示如何使用 EventListener 获取 ILogging 信息</span><span class="sxs-lookup"><span data-stu-id="01cea-123">This example shows how to use an EventListener to get ILogging information</span></span> 
<span data-ttu-id="01cea-124">class MyEventListener :EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // 初始化字符串、要传递到 EventSource 的参数的字符串字典。</span><span class="sxs-lookup"><span data-stu-id="01cea-124">class MyEventListener : EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { if (eventSource.Name == "Microsoft-Extensions-Logging") { // initialize a string, string dictionary of arguments to pass to the EventSource.</span></span>
<span data-ttu-id="01cea-125">// 启用记录器，匹配 App\* 与 Information，其他内容 (*) 都是默认级别（即 EventLevel.Error）var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;\*" } }; // 将默认级别（详细信息）设置为 Error，并且在这种情况下仅要求格式化消息。</span><span class="sxs-lookup"><span data-stu-id="01cea-125">// Turn on loggers matching App\* to Information, everything else (*) is the default level (which is EventLevel.Error) var args = new Dictionary&lt;string, string&gt;() { { "FilterSpecs", "App*:Information;\*" } }; // Set the default level (verbosity) to Error, and only ask for the formatted messages in this case.</span></span>
<span data-ttu-id="01cea-126">EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // 查找格式化消息事件，该事件具有以下参数布局（在 LoggingEventSource 中定义）。</span><span class="sxs-lookup"><span data-stu-id="01cea-126">EnableEvents(eventSource, EventLevel.Error, LoggingEventSource.Keywords.FormattedMessage, args); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { // Look for the formatted message event, which has the following argument layout (as defined in the LoggingEventSource.</span></span>
<span data-ttu-id="01cea-127">// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</span><span class="sxs-lookup"><span data-stu-id="01cea-127">// FormattedMessage(LogLevel Level, int FactoryID, string LoggerName, string EventId, string FormattedMessage); if (eventData.EventName == "FormattedMessage") Console.WriteLine("Logger {0}: {1}", eventData.Payload[2], eventData.Payload[4]); } }</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="OnEventCommand">
      <MemberSignature Language="C#" Value="protected override void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEventCommand(class System.Diagnostics.Tracing.EventCommandEventArgs command) cil managed" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.EventSource.LoggingEventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEventCommand (command As EventCommandEventArgs)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs ^ command);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="F#" Value="override this.OnEventCommand : System.Diagnostics.Tracing.EventCommandEventArgs -&gt; unit" Usage="loggingEventSource.OnEventCommand command" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.EventSource</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Diagnostics.Tracing.EventCommandEventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-3.0" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
