<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5456543ac0aaac6934fd944a4bf62dc952c3d6bf" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381142" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3b937-101">提供将对象或值类型序列化为 JSON 以及将 JSON 反序列化为对象或值类型的功能。</span><span class="sxs-lookup"><span data-stu-id="3b937-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="3b937-102">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="3b937-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="3b937-103">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-104">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="3b937-105">将表示单个 JSON 值的 UTF-8 编码文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3b937-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="3b937-106">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b937-107"><paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3b937-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-108">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-108">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-109">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-109">-or-</span></span>

<span data-ttu-id="3b937-110"><typeparamref name="returnType" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-110"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-111">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-111">-or-</span></span>

<span data-ttu-id="3b937-112">单个 JSON 值以外的跨度中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-112">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="3b937-113">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="3b937-113">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="3b937-114">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-114">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-115">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-115">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="3b937-116">将表示单个 JSON 值的文本分析为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3b937-116">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="3b937-117">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-117">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-118">使用 <xref:System.String> 不如使用 UTF-8 方法，因为实现本身就使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="3b937-118">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b937-119"><paramref name="json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3b937-119"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-120">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-120">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-121">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-121">-or-</span></span>

<span data-ttu-id="3b937-122"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-122"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-123">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-123">-or-</span></span>

<span data-ttu-id="3b937-124">单个 JSON 值以外的字符串中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-124">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="3b937-125">要从中读取 JSON 的读取器。</span><span class="sxs-lookup"><span data-stu-id="3b937-125">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="3b937-126">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-126">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-127">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-127">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="3b937-128">从提供的读取器读取一个 JSON 值（包括对象或数组）并将它转换为指定类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3b937-128">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="3b937-129">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-129">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-130">如果 `reader` 的 <xref:System.Text.Json.Utf8JsonReader.TokenType> 属性为 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或 <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>，则对 <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> 的一次调用会使读取器前进，以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="3b937-130">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="3b937-131">此方法完成后，`reader` 将定位到 JSON 值中的最后一个令牌。</span><span class="sxs-lookup"><span data-stu-id="3b937-131">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="3b937-132">如果引发了异常，则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="3b937-132">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="3b937-133">此方法会创建读取器所处理的数据的副本，因此，不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="3b937-133">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="3b937-134">用于创建 <xref:System.Text.Json.Utf8JsonReader> 实例的 <xref:System.Text.Json.JsonReaderOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="3b937-134">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="3b937-135">因此，在读取时使用 <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3b937-135">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b937-136"><paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3b937-136"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-137">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-137">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-138">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-138">-or-</span></span>

<span data-ttu-id="3b937-139"><typeparamref name="returnType" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-139"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-140">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-140">-or-</span></span>

<span data-ttu-id="3b937-141">无法从读取器中读取值。</span><span class="sxs-lookup"><span data-stu-id="3b937-141">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b937-142"><paramref name="reader" /> 使用的是不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-142"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-143">UTF-8 编码文本的目标类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-143">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="3b937-144">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="3b937-144">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-145">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-145">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="3b937-146">将表示单个 JSON 值的 UTF-8 编码文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3b937-146">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="3b937-147">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-147">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-148">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-148">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-149">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-149">-or-</span></span>

<span data-ttu-id="3b937-150"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-150"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-151">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-151">-or-</span></span>

<span data-ttu-id="3b937-152">单个 JSON 值以外的跨度中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-152">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-153">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-153">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="3b937-154">要分析的 JSON 文本。</span><span class="sxs-lookup"><span data-stu-id="3b937-154">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-155">分析期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-155">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="3b937-156">将表示单个 JSON 值的文本分析为泛型类型参数指定的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3b937-156">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="3b937-157">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-157">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-158">使用 <xref:System.String> 不如使用 UTF-8 方法，因为实现本身就使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="3b937-158">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b937-159"><paramref name="json" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3b937-159"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-160">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-160">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-161">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-161">-or-</span></span>

<span data-ttu-id="3b937-162"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-162"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-163">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-163">-or-</span></span>

<span data-ttu-id="3b937-164">单个 JSON 值以外的字符串中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-164">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-165">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-165">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="3b937-166">要从中读取 JSON 的读取器。</span><span class="sxs-lookup"><span data-stu-id="3b937-166">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-167">读取期间用于控制序列化程序行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-167">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="3b937-168">将一个 JSON 值（包括对象或数组）从提供的读取器读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="3b937-168">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="3b937-169">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-169">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-170">如果 `reader` 的 <xref:System.Text.Json.Utf8JsonReader.TokenType> 属性为 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> 或 <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>，则对 <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> 的一次调用会使读取器前进，以确定值的开头。</span><span class="sxs-lookup"><span data-stu-id="3b937-170">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="3b937-171">此方法完成后，`reader` 将定位到 JSON 值中的最后一个令牌。</span><span class="sxs-lookup"><span data-stu-id="3b937-171">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="3b937-172">如果引发了异常，则读取器将重置为在调用方法时它所处的状态。</span><span class="sxs-lookup"><span data-stu-id="3b937-172">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="3b937-173">此方法会创建读取器所处理的数据的副本，因此，不需要在返回此方法之后维护数据完整性。</span><span class="sxs-lookup"><span data-stu-id="3b937-173">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="3b937-174">用于创建 <xref:System.Text.Json.Utf8JsonReader> 实例的 <xref:System.Text.Json.JsonReaderOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="3b937-174">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="3b937-175">因此，在读取时使用 <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3b937-175">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-176">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-176">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-177">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-177">-or-</span></span>

<span data-ttu-id="3b937-178"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-178"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-179">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-179">-or-</span></span>

<span data-ttu-id="3b937-180">无法从读取器中读取值。</span><span class="sxs-lookup"><span data-stu-id="3b937-180">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b937-181"><paramref name="reader" /> 不受支持的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-181"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="3b937-182">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-182">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="3b937-183">要转换为并返回的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-183">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-184">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-184">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b937-185">可能用于取消读取操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="3b937-185">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="3b937-186">将表示单个 JSON 值的 UTF-8 编码文本异步读取到指定类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="3b937-186">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="3b937-187">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="3b937-187">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="3b937-188">JSON 值的 <paramref name="returnType" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-188">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b937-189"><paramref name="utf8Json" /> 或 <paramref name="returnType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3b937-189"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-190">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-190">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-191">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-191">-or-</span></span>

<span data-ttu-id="3b937-192"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-192"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-193">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-193">-or-</span></span>

<span data-ttu-id="3b937-194">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-194">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-195">JSON 值的目标类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-195">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="3b937-196">要分析的 JSON 数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-196">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-197">读取期间用于控制行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-197">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b937-198">可能用于取消读取操作的标记。</span><span class="sxs-lookup"><span data-stu-id="3b937-198">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="3b937-199">将表示单个 JSON 值的 UTF-8 编码文本异步读取到泛型类型参数指定的类型的实例中。</span><span class="sxs-lookup"><span data-stu-id="3b937-199">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="3b937-200">流会被完整读取。</span><span class="sxs-lookup"><span data-stu-id="3b937-200">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="3b937-201">JSON 值的 <typeparamref name="TValue" /> 表示。</span><span class="sxs-lookup"><span data-stu-id="3b937-201">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="3b937-202">JSON 无效。</span><span class="sxs-lookup"><span data-stu-id="3b937-202">The JSON is invalid.</span></span>
          
<span data-ttu-id="3b937-203">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-203">-or-</span></span>

<span data-ttu-id="3b937-204"><typeparamref name="TValue" /> 与 JSON 不兼容。</span><span class="sxs-lookup"><span data-stu-id="3b937-204"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="3b937-205">- 或 -</span><span class="sxs-lookup"><span data-stu-id="3b937-205">-or-</span></span>

<span data-ttu-id="3b937-206">流中存在剩余数据。</span><span class="sxs-lookup"><span data-stu-id="3b937-206">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3b937-207">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-207">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="3b937-208">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-208">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-209">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-209">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="3b937-210">将指定类型的值转换为 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="3b937-210">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="3b937-211">值的 JSON 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="3b937-211">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-212">使用 <xref:System.String> 不如使用 UTF-8 编码，因为在内部实现使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="3b937-212">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="3b937-213">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="3b937-213">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="3b937-214">要写入到的 JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="3b937-214">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="3b937-215">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-215">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="3b937-216">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-216">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-217">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-217">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="3b937-218">将指定类型的 JSON 表示形式写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="3b937-218">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-219">用于创建 <xref:System.Text.Json.Utf8JsonWriter> 实例的 <xref:System.Text.Json.JsonWriterOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="3b937-219">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="3b937-220">因此，在编写时使用 <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3b937-220">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>
               
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-221">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-221">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="3b937-222">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-222">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-223">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-223">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="3b937-224">将泛型类型参数指定的类型的值转换为 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="3b937-224">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="3b937-225">值的 JSON 字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="3b937-225">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-226">使用 <xref:System.String> 不如使用 UTF-8 编码，因为在内部实现使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="3b937-226">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="3b937-227">另请参见 <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> 和 <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>。</span><span class="sxs-lookup"><span data-stu-id="3b937-227">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-228">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-228">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="3b937-229">要写入到的 JSON 编写器。</span><span class="sxs-lookup"><span data-stu-id="3b937-229">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="3b937-230">要转换并写入的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-230">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-231">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-231">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="3b937-232">将泛型类型参数指定的类型的 JSON 表示形式写入提供的编写器。</span><span class="sxs-lookup"><span data-stu-id="3b937-232">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="3b937-233">用于创建 <xref:System.Text.Json.Utf8JsonWriter> 实例的 <xref:System.Text.Json.JsonWriterOptions> 在发生冲突时优先于 <xref:System.Text.Json.JsonSerializerOptions>。</span><span class="sxs-lookup"><span data-stu-id="3b937-233">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="3b937-234">因此，在编写时使用 <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>和 <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3b937-234">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>
               
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="3b937-235">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="3b937-235">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="3b937-236">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-236">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="3b937-237">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-237">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-238">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-238">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b937-239">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="3b937-239">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="3b937-240">将指定类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入指定流。</span><span class="sxs-lookup"><span data-stu-id="3b937-240">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="3b937-241">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="3b937-241">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-242">要序列化的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-242">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="3b937-243">要写入的 UTF-8 流。</span><span class="sxs-lookup"><span data-stu-id="3b937-243">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="3b937-244">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-244">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-245">用于控制序列化行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-245">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b937-246">可能用于取消写入操作的标记。</span><span class="sxs-lookup"><span data-stu-id="3b937-246">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="3b937-247">将泛型类型参数指定的类型的值异步转换为 UTF-8 编码的 JSON 文本并将它写入流。</span><span class="sxs-lookup"><span data-stu-id="3b937-247">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="3b937-248">表示异步写入操作的任务。</span><span class="sxs-lookup"><span data-stu-id="3b937-248">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3b937-249">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-249">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="3b937-250">要转换的 <paramref name="value" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-250">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-251">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-251">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="3b937-252">将指定类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="3b937-252">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="3b937-253">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</span><span class="sxs-lookup"><span data-stu-id="3b937-253">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="3b937-254">值的类型。</span><span class="sxs-lookup"><span data-stu-id="3b937-254">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="3b937-255">要转换的值。</span><span class="sxs-lookup"><span data-stu-id="3b937-255">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="3b937-256">用于控制转换行为的选项。</span><span class="sxs-lookup"><span data-stu-id="3b937-256">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="3b937-257">将泛型类型参数指定的类型的值转换为编码为 UTF-8 字节的 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="3b937-257">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="3b937-258">值的 JSON 字符串表示形式，编码为 UTF-8 字节。</span><span class="sxs-lookup"><span data-stu-id="3b937-258">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
